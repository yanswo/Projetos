
public class Carro extends Veiculo {

	private String marca;
	private String numeroChassi;
	
	public Carro(String placa) {
		super(placa);
	}

	public String getMarca() {
		return marca;
	}

	public void setMarca(String marca) {
		this.marca = marca;
	}

	public String getNumeroChassi() {
		return numeroChassi;
	}

	public void setNumeroChassi(String numeroChassi) {
		this.numeroChassi = numeroChassi;
	}

}

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class ControleEstacionamento {
	public static String tipoMoto = "Motocicleta";
	public static String tipoCarro = "Carro";

	public static final int QUANTIDADE_VAGAS_CARRO = 15;
	public static final int PRECO_VAGA_CARRO = 15;

	public static final int QUANTIDADE_VAGAS_MOTOCICLETA = 5;
	public static final int PRECO_VAGA_MOTOCICLETA = 10;

	private List<CadastroEntradaVeiculo> registrosEntrada;
	private List<CadastroSaidaVeiculo> registrosSaida;

	public ControleEstacionamento() {
		this.registrosEntrada = new ArrayList<>();
		this.registrosSaida = new ArrayList<>();
	}

	public void adicionarVeiculo(Veiculo veiculo) {
		boolean veiculoJaExiste = registrosEntrada.stream()
				.anyMatch(cev -> cev.getVeiculo().getPlaca().equals(veiculo.getPlaca()));

		if (veiculoJaExiste) {
			System.out.println("\nVeiculo ja cadastrado!");
			return;
		}

		if (veiculo instanceof Carro) {
			long quantidadeAtualCarro = registrosEntrada.stream().filter(cev -> cev.getVeiculo() instanceof Carro)
					.count();

			if (quantidadeAtualCarro == QUANTIDADE_VAGAS_CARRO) {
				System.out.println("\nNâo ha vagas para carro");
				return;
			}
		}

		if (veiculo instanceof Motocicleta) {
			long quantidadeAtualMotocicleta = registrosEntrada.stream()
					.filter(cev -> cev.getVeiculo() instanceof Motocicleta).count();

			if (quantidadeAtualMotocicleta == QUANTIDADE_VAGAS_MOTOCICLETA) {
				System.out.println("\nNao ha vagas para motocicleta");
				return;
			}
		}

		registrosEntrada.add(new CadastroEntradaVeiculo(veiculo));
	}

	public void exibirRelatorioOcupacao() {
		long quantidadeAtualCarro = registrosEntrada.stream().filter(cev -> cev.getVeiculo() instanceof Carro).count();
		long quantidadeAtualMotocicleta = registrosEntrada.stream()
				.filter(cev -> cev.getVeiculo() instanceof Motocicleta).count();

		System.out.println("\nQuantidade de vagas ocupadas de carro: " + quantidadeAtualCarro);
		exibirPlacas(registrosEntrada, tipoCarro);
		System.out.println(
				"Quantidade de vagas disponiveis de carro: " + (QUANTIDADE_VAGAS_CARRO - quantidadeAtualCarro));
		System.out.println("\nQuantidade de vagas ocupadas de motocicleta: " + quantidadeAtualMotocicleta);
		exibirPlacas(registrosEntrada, tipoMoto);
		System.out.println("Quantidade de vagas disponiveis de motocicleta: "
				+ (QUANTIDADE_VAGAS_MOTOCICLETA - quantidadeAtualMotocicleta));
	}

	public void removerVeiculo(String placa) {
		Optional<CadastroEntradaVeiculo> optionalCadastroEntrada = registrosEntrada.stream()
				.filter(cev -> cev.getVeiculo().getPlaca().equals(placa)).findFirst();

		if (optionalCadastroEntrada.isEmpty()) {
			System.out.println("\nVeiculo nao encontrado!");
			return;
		}

		CadastroEntradaVeiculo cadastroEntradaEncontrado = optionalCadastroEntrada.get();

		CadastroSaidaVeiculo cadastroSaidaVeiculo = new CadastroSaidaVeiculo(cadastroEntradaEncontrado.getVeiculo(),
				cadastroEntradaEncontrado.getHorarioEntrada());

		System.out.println("O valor a ser pago e de: " + cadastroSaidaVeiculo.getPrecoAPagar());

		registrosSaida.add(cadastroSaidaVeiculo);
		registrosEntrada.remove(cadastroEntradaEncontrado);
	}

	public void exibirRelatorioFinanceiro() {
		if (registrosSaida.isEmpty()) {
			System.out.println("Nao ha registro de saidas hoje.");
			return;
		}

		System.out.println("\nRelatorio financeiro: ");
		for (CadastroSaidaVeiculo registroSaida : registrosSaida) {
			System.out.printf("Placa: %s Valor pago: R$ %.2f\n", registroSaida.getVeiculo().getPlaca(),
					registroSaida.getPrecoAPagar());
		}
		System.out.println("");
	}

	private void exibirPlacas(List<CadastroEntradaVeiculo> registrosEntrada, String tipoVeiculo) {
		
		registrosEntrada.stream()
		.filter(cev -> cev.getVeiculo().getClass().getTypeName().equals(tipoVeiculo))
		.forEach(c ->  exibirPlaca(c.getVeiculo()));		
	}

	private void exibirPlaca(Veiculo veiculo) {
		System.out.printf("Placa do veiculo: %s\n", veiculo.getPlaca());
	}

}

import java.util.Scanner;

public class ControleUsuario {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);

		ControleEstacionamento estacionamento = new ControleEstacionamento();

		int opcao = -1;

		System.out.println("Bem vindo ao estacionamento do seu ze");
		System.out.println("Precos:");
		System.out.println("Carro - 15.00 R$/Hora");
		System.out.println("Motocicleta - 10.00 R$/Hora");
		System.out.println("A Permanecia de menos de 1 minuto no estacionamento e de graca.");

		while (opcao != 0) {
			System.out.println("\nEscolha uma opção:");
			System.out.println("1 - Cadastrar de entrada de veiculo");
			System.out.println("2 - Relatorio de ocupação");
			System.out.println("3 - Cadastrar saida de veiculo");
			System.out.println("4 - Relatorio financeiro");
			System.out.println("0 - Encerrar sistema");
			try {
				opcao = Integer.parseInt(scan.nextLine());

				if (opcao == 1) {

					System.out.println("\nDigite a placa do veiculo");
					String placa = scan.nextLine();

					System.out.println("Digite o tipo de veiculo:");
					System.out.println("1 - Carro");
					System.out.println("2 - Motocicleta");
					System.out.println("0 - Cancelar");

					int opcaoCadastro = Integer.parseInt(scan.nextLine());

					if (opcaoCadastro != 1 && opcaoCadastro != 2) {
						System.out.println("\nOperacao cancelada");
						continue;
					}

					Veiculo veiculo;

					if (opcaoCadastro == 1) {
						veiculo = new Carro(placa);
					} else {
						veiculo = new Motocicleta(placa);
					}

					estacionamento.adicionarVeiculo(veiculo);
				} else if (opcao == 2) {
					estacionamento.exibirRelatorioOcupacao();
				} else if (opcao == 3) {
					System.out.println("\nDigite a placa do veiculo");
					String placa = scan.nextLine();

					estacionamento.removerVeiculo(placa);
				} else if (opcao == 4) {
					estacionamento.exibirRelatorioFinanceiro();
				}
			} catch (Exception ex) {
				System.out.println("Digite uma opcao valida!");
			}
		}
	}

}


public class Motocicleta extends Veiculo {

	private String marca;
	private String numeroChassi;

	public Motocicleta(String placa) {
		super(placa);
	}

	public String getMarca() {
		return marca;
	}

	public void setMarca(String marca) {
		this.marca = marca;
	}

	public String getNumeroChassi() {
		return numeroChassi;
	}

	public void setNumeroChassi(String numeroChassi) {
		this.numeroChassi = numeroChassi;
	}

}


public abstract class Veiculo {

	private String placa;

	public Veiculo(String placa) {
		this.placa = placa;
	}

	public void setPlaca(String placa) {
		this.placa = placa;
	}

	public String getPlaca() {
		return this.placa;
	}

}

import java.time.LocalTime;

public class CadastroEntradaVeiculo{

	private LocalTime horarioEntrada;
	private Veiculo veiculo;

	public CadastroEntradaVeiculo(Veiculo veiculo) {
		this.horarioEntrada = LocalTime.now();
		this.veiculo = veiculo;
	}

	public LocalTime getHorarioEntrada() {
		return horarioEntrada;
	}

	public Veiculo getVeiculo() {
		return veiculo;
	}

}

import java.time.Duration;
import java.time.LocalTime;

public class CadastroSaidaVeiculo {

	private LocalTime horarioSaida;
	private Veiculo veiculo;
	private float precoAPagar;

	public CadastroSaidaVeiculo(Veiculo veiculo, LocalTime horarioEntrada) {
		this.horarioSaida = LocalTime.now();
		this.veiculo = veiculo;
		calculaPrecoTotal(horarioEntrada);
	}

	public LocalTime getHorarioSaida() {
		return horarioSaida;
	}

	public Veiculo getVeiculo() {
		return veiculo;
	}

	public float getPrecoAPagar() {
		return precoAPagar;
	}

	private void calculaPrecoTotal(LocalTime horarioEntrada) {
		long tempoOcupacaoVagaEmMinutos = Duration.between(horarioEntrada, horarioSaida).toMinutes();

		int tempoOcupacaoVagaEmHoras = (int) tempoOcupacaoVagaEmMinutos / 60;

		if (tempoOcupacaoVagaEmMinutos % 60 > 0) {
			tempoOcupacaoVagaEmHoras++;
		}

		if (veiculo instanceof Carro) {
			this.precoAPagar = ControleEstacionamento.PRECO_VAGA_CARRO * tempoOcupacaoVagaEmHoras;
		} else if (veiculo instanceof Motocicleta) {
			this.precoAPagar = ControleEstacionamento.PRECO_VAGA_MOTOCICLETA * tempoOcupacaoVagaEmHoras;
		}

	}

}
